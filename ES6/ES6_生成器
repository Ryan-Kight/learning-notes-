生成器
    --更方便的产出迭代器
生成器是通过构造函数generator创建的对象，生成器既是一个迭代器，同是又是一个可迭代对象。
如何创建生成器？
    必须使用生成器函数 Generator Function
如何书写一个生成器函数呢？
function* method(){

}
调用函数只会产生 生成器，不会运行内部函数。
内部是为了给生成器每一次迭代提供数据的。

生成器内部通过yield关键字进行层次分割。

使用生成器常规过程：
写一个生成器函数function* name (){}
const generator = new name()； 构造出了一个生成器函数对象
使用构造出来的函数对象的方法，generator.next()，使它执行到下一个用yield区分的模块，执行当中的代码。
得到一个对象{ value : yield处的值, done : 是否执行到最后一个yield}

细节：
    调用生成器next方法时候，可以传参数，传递的参数交给yield处的返回值。
    第一次调用的时候，传参数没有意义。
    在生成器内部，可以调用其他生成器。 用yield* 。。。 () 进行调用。

生成器的其他API
    return方法 : 调用该方法，可以提前结束生成器。
    throw方法 : 调用该方法，在生成器中生成一个错误。

    
