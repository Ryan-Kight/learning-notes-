符号（Symbol）是ES6新增的数据类型，通过函数调用的方法来获得。
普通符号 const sym = Symbol('符号描述，这个符号用来干嘛的')
符号设计的初衷是用来给对象设置私有属性的
私有属性，只供类或者对象自己使用，外部不通过特殊方法访问不到。
符号的特点：
    1.没有字面量
    2.使用typeof得到的类型为‘symbol’
    3.每次调用Symbol的时候，获得的符号都是全新的。
    4.符号可以作为的对象的属性存在。 用可变计算名实现。
综上：开发人员可以通过精心设计，是外界无法常规访问到。
    for-in 不能访问符号属性，符号属性不能被枚举
        for(const prop in test){
            console.log(prop);
        }
    console.log(Object.keys(test)); Object.keys()也访问不了
    Object.getOwnPropertyNames(test) 也整不了 得到自己的属性名
    为了能读取到字符属性，ES6专门提供了一个方法
    console.log(Object.getOwnPropertySymbols(test));
    会独立将对象中用字符命名的属性读到一个数组里返回出去。
    const fun = Object.getOwnPropertySymbols(test)[0];
    test[fun](); 用这种特殊方式也可以访问到字符属性中到内容。

共享符号
根据某个符号名称能够得到同一个符号。
const a = Symbol.for() const b = Symbol.for(); 那么a和b就会拿到同一个字符。
实现方法类似于注册表。

知名符号
解决JS的一些魔法，就是人们之前控制不了的一部分代码。
知名符号是一些具有特殊含义到共享符号，通过Symbol的静态属性得到。
Symbol.hasInstance()
该函数用于定义构造函数的静态成员，他将影响instanceof的判定
对象 instanceof 构造函数， a instanceof b 翻译： a是否为b的实例对象，返回true/false
而Symbol.hasInstance()是instanceof实现的秘密。
可以用Object.defineProperty(构造函数，Symbol.hasInstance(){ value : function(obj){ return false;} } );

const arr = [3];
const result = arr.concat(56); (56,[2,3,4]) 会将数组解开变成一个个的。
改变数组实例的arr[Symbol.isConcatSpreadable] = true(把数组解开)/false（不把数组解开，保留）
