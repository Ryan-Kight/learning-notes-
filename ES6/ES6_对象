对象
对象字面量 （下面的方法仅供对象使用） const obj = {}  用直接 = 给予的，不用new关键字的都是字面量
1.成员速写 
    如果对象字面量初始化时，成员的名字来自于一个变量，并且和变量的名称相同，则可以简写。
2.方法速写
    对象字面量初始化时，方法可以省略冒号和‘function’关键字
3.计算属性名
    初始化对象的时候，某些属性名可以来自变量，不确定。在ES6中可以用中括号[]表示其中的内容是变量，属性名不确定

Object的新增API
1.Object.is() 用于判断两个对象或者数据是否相等。
    解决了之前存在问题的两个比较：Object.is(NaN,NaN)----true    Object.is(+0,-0)----false
2.Object.assign() 用于混合对象  把后者混入到第一个对象中，会对原有的第一个对象产生影响。
    一般混合对象用展开运算符来实现。    Object.assign({},obj1,obj2);
3.Object.getOwnPropertyNames()  返回数组类型，每个元素是string形式，数字在前，普通内容顺序排列

4.Object.setPrototypeOf() 该函数用于设置某个对象的原型。
    Object.setPrototypeOf(obj1, obj2) 设置obj1的原型为obj2

面向对象简介
面向对象是一种编程思想
面向过程：思考的切入点是功能步骤化
面向对象：思考的切入点是对象的划分
e.g : 大象装冰箱 
            --面向过程   1.function openFridge(){}
                        2.function putElephant(){}
                        3.function closeFridge(){}
            --面向对象   1.大象是一个对象 new Elephant()
                        2.冰箱是一个对象 new Fridge()
                        3.冰箱有个方法，把东西装进去 fridge.put(elephant)

为了避免，每次new对象的时候，相同特性重复，所以把方法定义在原型上

ES6 将对象的概念聚合化，诞生了类的概念
建类：
class Animal {
    constructor(name,sex){
        this.name = name;
        this.sex = sex;
    } 
    print(){
        console.log(this.name);
    }
}
特点：
    类不会提升，存在暂时性死区。
    类中所有方法全在严格模式下执行。
    类的所有方法都不会被枚举。
    类的方法不能被构造。
    对象的构造必须通过new。

类语法：
    1.可计算的成员名
    2.getter和setter 方法不存在原型上
    3.静态成员  使用static定义的就是静态成员 ，不依赖实例对象，挂载在类上
    4.字段初始化器  直接挂载在实例对象上。
    5.类表达式 const Human = class {}

类的继承
如果A是B的父类，则B会自动拥有A中所有的实例成员。
之前的做法是Object.setPrototypeOf(B,A)
现在类的继承有更好的方式：
class B extends A {          使B继承A
    constructor(){
        super(...,...,...)   如果当作对象使用的化，当作父类的原型（super.。。。）如果当作构造函数使用的化，表示父类的constructor
    }
}
ES6中要求，如果写了构造函数，子类必须在constructor中手动调用super（），不写constructor的话，也会默认自动添加构造器。

