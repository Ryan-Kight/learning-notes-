声明变量的问题:
    用var声明的变量，可以被重复声明，从而导致数据被覆盖。
    会使变量进行提升:
        怪异的数据访问  e.g:    
        if(Math.random() < 0.5){
            var a = 1;      //变量提升到全局
            console.log(a);
        } else{
            console.log(a); //如果走else不会报错
        }
        console.log(a);

        闭包问题，由于var声明的变量提升到了全局，所以最后访问到的是全局里的最终结果

    全局变量挂载到全局对象window身上 会导致全局对象成员污染问题。

使用let进行变量声明，ES6引入let关键字和块级作用域 {}内为作用范围，执行完后会立即销毁

let 不会把变量挂载到全局上

let 声明的变量不允许在同一作用域内重复声明。

用let 声明的变量不会提升吗？ 
其实是会提升的，底层是将let声明的变量存入暂时性死区中，当执行到let语句时，将它从暂时性死区中释放。

let声明的变量遇到 {} 都会开启一个新的作用域，将用let声明的变量绑定进去
所以像每一次的for循环都会给用let声明的循环变量开启一个新的作用域，从而使里面的代码只能访问到这次创建的循环变量，解决了闭包问题。

const 和 let 声明变量内容大部分一致，区别仅在于用const声明的变量，必须在声明时赋值，并且不可更改。
所以const一般用于不会更改的变量。
其实在开发中，有很多变量是都不会更改的；在定义的时候，都用const声明变量，要是需要跟更改的时候，再把他改为let。
注意细节：
    1. 常量不可变，是指声明变量的常量的内存空间不可变，但是并不保证内存空间里的地址指向的其他空间不变。即凡是放在常量中的任何东西都不可变，但常量中地址指向的其他空间可以被更改。
    2. 常量的命名
        特殊常量， e.g PI 像这种确定固定数值的常量全部大写。多个单词用"_"隔开。 e.g MOON_EARTH_DISTANCE
        普通常量   小驼峰式命名
    3. for循环中，声明的循环变量是不可以用const声明的，原因是每一次循环结束，都会改变循环变量的值，不符合const的声明规范。
       而for (const prop in obj) 是可以用const声明的，因为每一次的prop都是新的。

